# Builds on all branches & PRs
# Deploys to PyPi on "release".
name: Build, test and publish

on:
  push:
    branches:
      - master
      - release
      - version/*
    tags:
      - "*"
  pull_request: { }

jobs:
  linting:
    runs-on: ubuntu-latest
    name: Linting
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with ruff
        run: ruff check --output-format=github .

  code-formatting:
    runs-on: ubuntu-latest
    name: Code Format
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: install ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Check with ruff
        run: ruff format --check .

  typechecks:
    runs-on: ubuntu-latest
    name: Type checks
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: theCapypara/mypy-check@rust-support
        name: Run type checks
        with:
          path: 'explorerscript'
          mypy_flags: '--config-file mypy.ini --junit-xml mypy-${{ matrix.python-version }}.xml'
          requirements: '-r requirements.txt'
          python_version: '${{ matrix.python-version }}'
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: MyPy Test Results (Python ${{ matrix.python-version }})
          path: mypy-${{ matrix.python-version }}.xml

  test:
    runs-on: ubuntu-latest
    name: Runs tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install tox tox-gh-actions
      - uses: dtolnay/rust-toolchain@stable
      - name: Test with tox
        run: tox -- -m "not romtest"
      - run: mv pytest.xml pytest-${{ matrix.python-version }}.xml
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "Pytest Test Results (Python ${{ matrix.python-version }})"
          path: pytest-${{ matrix.python-version }}.xml

  test-event-file:
    name: "Publish Test Results Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Event File
          path: ${{ github.event_path }}

  build-sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build SDist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist/*.tar.gz

  build:
    runs-on: ${{ matrix.os }}
    name: Build Wheels
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          # very slow:
          #- os: ubuntu-latest
          #  arch: arm64
          - os: macos-12
            arch: x86_64
          - os: macos-12
            arch: arm64
          - os: windows-2019
            arch: x86
          - os: windows-2019
            arch: AMD64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: bash
        run: |
          perl -i -pe "s/version\s*=\s*\"(.*?)(\.rc.*|\.a.*|\.post.*)?\"/version=\"\1.dev0+${GITHUB_SHA::8}\"/" pyproject.toml
      - name: Note version
        if: matrix.os != 'windows-2019'
        shell: bash
        run: |
          python3 -m venv .yq-venv
          . .yq-venv/bin/activate
          pip install yq
          echo "PACKAGE_VERSION=$(tomlq '.project.version' pyproject.toml -r)" >> $GITHUB_ENV
      - name: Note version (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          pipx install yq
          $env:PACKAGE_VERSION = tomlq.exe '.project.version' pyproject.toml -r
          echo "PACKAGE_VERSION=$env:PACKAGE_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Download GNU Tar
        uses: suisei-cn/actions-download-file@v1.6.0
        if: "matrix.os == 'windows-2019'"
        with:
          url: https://skytemple.org/build_deps/tar.exe
          target: "C:\\tarout"
      - name: Prepend GNU Tar to Path
        if: "matrix.os == 'windows-2019'"
        shell: powershell
        run:
          echo "C:\tarout" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          MACOSX_DEPLOYMENT_TARGET: "10.13"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.whl

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
      - build-sdist
      - test
      - typechecks
    runs-on: ubuntu-latest
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload wheels*/*.whl wheels*/*.tar.gz
