# Generated from SsbScript.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,346,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,1,1,1,1,1,5,1,97,8,1,10,1,12,1,100,9,1,1,1,1,1,1,1,1,1,5,1,106,
        8,1,10,1,12,1,109,9,1,1,1,3,1,112,8,1,1,2,1,2,1,2,3,2,117,8,2,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,3,14,199,8,14,1,15,3,15,202,8,15,1,15,1,15,5,15,
        206,8,15,10,15,12,15,209,9,15,1,15,3,15,212,8,15,1,15,4,15,215,8,
        15,11,15,12,15,216,3,15,219,8,15,1,16,3,16,222,8,16,1,16,1,16,1,
        16,4,16,227,8,16,11,16,12,16,228,1,17,3,17,232,8,17,1,17,1,17,1,
        17,4,17,237,8,17,11,17,12,17,238,1,18,3,18,242,8,18,1,18,1,18,1,
        18,4,18,247,8,18,11,18,12,18,248,1,19,1,19,1,20,1,20,1,21,1,21,1,
        22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
        28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,282,
        8,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
        1,37,1,38,1,38,1,39,1,39,1,40,4,40,302,8,40,11,40,12,40,303,1,41,
        1,41,3,41,308,8,41,1,41,3,41,311,8,41,1,41,1,41,3,41,315,8,41,1,
        42,1,42,1,42,1,42,5,42,321,8,42,10,42,12,42,324,9,42,1,42,1,42,1,
        42,3,42,329,8,42,1,43,1,43,1,43,1,43,5,43,335,8,43,10,43,12,43,338,
        9,43,1,44,1,44,5,44,342,8,44,10,44,12,44,345,9,44,1,322,0,45,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,0,71,0,
        73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,1,0,16,4,0,10,10,12,
        13,39,39,92,92,4,0,10,10,12,13,34,34,92,92,1,0,36,36,1,0,126,126,
        2,0,79,79,111,111,2,0,88,88,120,120,2,0,66,66,98,98,1,0,49,57,1,
        0,48,57,1,0,48,55,3,0,48,57,65,70,97,102,1,0,48,49,3,0,9,10,13,13,
        32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,366,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
        49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
        59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,
        91,1,0,0,0,3,111,1,0,0,0,5,116,1,0,0,0,7,118,1,0,0,0,9,123,1,0,0,
        0,11,127,1,0,0,0,13,137,1,0,0,0,15,148,1,0,0,0,17,162,1,0,0,0,19,
        168,1,0,0,0,21,177,1,0,0,0,23,186,1,0,0,0,25,188,1,0,0,0,27,191,
        1,0,0,0,29,198,1,0,0,0,31,218,1,0,0,0,33,221,1,0,0,0,35,231,1,0,
        0,0,37,241,1,0,0,0,39,250,1,0,0,0,41,252,1,0,0,0,43,254,1,0,0,0,
        45,256,1,0,0,0,47,258,1,0,0,0,49,260,1,0,0,0,51,262,1,0,0,0,53,264,
        1,0,0,0,55,266,1,0,0,0,57,268,1,0,0,0,59,270,1,0,0,0,61,272,1,0,
        0,0,63,274,1,0,0,0,65,281,1,0,0,0,67,285,1,0,0,0,69,287,1,0,0,0,
        71,290,1,0,0,0,73,292,1,0,0,0,75,294,1,0,0,0,77,296,1,0,0,0,79,298,
        1,0,0,0,81,301,1,0,0,0,83,305,1,0,0,0,85,316,1,0,0,0,87,330,1,0,
        0,0,89,339,1,0,0,0,91,92,5,59,0,0,92,2,1,0,0,0,93,98,5,39,0,0,94,
        97,3,69,34,0,95,97,8,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,100,1,
        0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,
        101,112,5,39,0,0,102,107,5,34,0,0,103,106,3,69,34,0,104,106,8,1,
        0,0,105,103,1,0,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,
        0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,107,1,0,0,0,110,112,5,34,
        0,0,111,93,1,0,0,0,111,102,1,0,0,0,112,4,1,0,0,0,113,117,3,11,5,
        0,114,117,3,13,6,0,115,117,3,15,7,0,116,113,1,0,0,0,116,114,1,0,
        0,0,116,115,1,0,0,0,117,6,1,0,0,0,118,119,5,99,0,0,119,120,5,111,
        0,0,120,121,5,114,0,0,121,122,5,111,0,0,122,8,1,0,0,0,123,124,5,
        100,0,0,124,125,5,101,0,0,125,126,5,102,0,0,126,10,1,0,0,0,127,128,
        5,102,0,0,128,129,5,111,0,0,129,130,5,114,0,0,130,131,5,95,0,0,131,
        132,5,97,0,0,132,133,5,99,0,0,133,134,5,116,0,0,134,135,5,111,0,
        0,135,136,5,114,0,0,136,12,1,0,0,0,137,138,5,102,0,0,138,139,5,111,
        0,0,139,140,5,114,0,0,140,141,5,95,0,0,141,142,5,111,0,0,142,143,
        5,98,0,0,143,144,5,106,0,0,144,145,5,101,0,0,145,146,5,99,0,0,146,
        147,5,116,0,0,147,14,1,0,0,0,148,149,5,102,0,0,149,150,5,111,0,0,
        150,151,5,114,0,0,151,152,5,95,0,0,152,153,5,112,0,0,153,154,5,101,
        0,0,154,155,5,114,0,0,155,156,5,102,0,0,156,157,5,111,0,0,157,158,
        5,114,0,0,158,159,5,109,0,0,159,160,5,101,0,0,160,161,5,114,0,0,
        161,16,1,0,0,0,162,163,5,97,0,0,163,164,5,108,0,0,164,165,5,105,
        0,0,165,166,5,97,0,0,166,167,5,115,0,0,167,18,1,0,0,0,168,169,5,
        112,0,0,169,170,5,114,0,0,170,171,5,101,0,0,171,172,5,118,0,0,172,
        173,5,105,0,0,173,174,5,111,0,0,174,175,5,117,0,0,175,176,5,115,
        0,0,176,20,1,0,0,0,177,178,5,80,0,0,178,179,5,111,0,0,179,180,5,
        115,0,0,180,181,5,105,0,0,181,182,5,116,0,0,182,183,5,105,0,0,183,
        184,5,111,0,0,184,185,5,110,0,0,185,22,1,0,0,0,186,187,3,89,44,0,
        187,24,1,0,0,0,188,189,7,2,0,0,189,190,3,89,44,0,190,26,1,0,0,0,
        191,192,7,3,0,0,192,193,3,89,44,0,193,28,1,0,0,0,194,199,3,31,15,
        0,195,199,3,33,16,0,196,199,3,35,17,0,197,199,3,37,18,0,198,194,
        1,0,0,0,198,195,1,0,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,30,1,
        0,0,0,200,202,5,45,0,0,201,200,1,0,0,0,201,202,1,0,0,0,202,203,1,
        0,0,0,203,207,3,71,35,0,204,206,3,73,36,0,205,204,1,0,0,0,206,209,
        1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,219,1,0,0,0,209,207,
        1,0,0,0,210,212,5,45,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,214,
        1,0,0,0,213,215,5,48,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,
        1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,201,1,0,0,0,218,211,
        1,0,0,0,219,32,1,0,0,0,220,222,5,45,0,0,221,220,1,0,0,0,221,222,
        1,0,0,0,222,223,1,0,0,0,223,224,5,48,0,0,224,226,7,4,0,0,225,227,
        3,75,37,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,
        1,0,0,0,229,34,1,0,0,0,230,232,5,45,0,0,231,230,1,0,0,0,231,232,
        1,0,0,0,232,233,1,0,0,0,233,234,5,48,0,0,234,236,7,5,0,0,235,237,
        3,77,38,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,
        1,0,0,0,239,36,1,0,0,0,240,242,5,45,0,0,241,240,1,0,0,0,241,242,
        1,0,0,0,242,243,1,0,0,0,243,244,5,48,0,0,244,246,7,6,0,0,245,247,
        3,79,39,0,246,245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,
        1,0,0,0,249,38,1,0,0,0,250,251,5,40,0,0,251,40,1,0,0,0,252,253,5,
        41,0,0,253,42,1,0,0,0,254,255,5,44,0,0,255,44,1,0,0,0,256,257,5,
        58,0,0,257,46,1,0,0,0,258,259,5,61,0,0,259,48,1,0,0,0,260,261,5,
        43,0,0,261,50,1,0,0,0,262,263,5,64,0,0,263,52,1,0,0,0,264,265,5,
        167,0,0,265,54,1,0,0,0,266,267,5,123,0,0,267,56,1,0,0,0,268,269,
        5,125,0,0,269,58,1,0,0,0,270,271,5,60,0,0,271,60,1,0,0,0,272,273,
        5,62,0,0,273,62,1,0,0,0,274,275,5,46,0,0,275,276,5,53,0,0,276,64,
        1,0,0,0,277,282,3,87,43,0,278,282,3,85,42,0,279,282,3,81,40,0,280,
        282,3,83,41,0,281,277,1,0,0,0,281,278,1,0,0,0,281,279,1,0,0,0,281,
        280,1,0,0,0,282,283,1,0,0,0,283,284,6,32,0,0,284,66,1,0,0,0,285,
        286,9,0,0,0,286,68,1,0,0,0,287,288,5,92,0,0,288,289,9,0,0,0,289,
        70,1,0,0,0,290,291,7,7,0,0,291,72,1,0,0,0,292,293,7,8,0,0,293,74,
        1,0,0,0,294,295,7,9,0,0,295,76,1,0,0,0,296,297,7,10,0,0,297,78,1,
        0,0,0,298,299,7,11,0,0,299,80,1,0,0,0,300,302,7,12,0,0,301,300,1,
        0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,82,1,0,
        0,0,305,307,5,92,0,0,306,308,3,81,40,0,307,306,1,0,0,0,307,308,1,
        0,0,0,308,314,1,0,0,0,309,311,5,13,0,0,310,309,1,0,0,0,310,311,1,
        0,0,0,311,312,1,0,0,0,312,315,5,10,0,0,313,315,2,12,13,0,314,310,
        1,0,0,0,314,313,1,0,0,0,315,84,1,0,0,0,316,317,5,47,0,0,317,318,
        5,42,0,0,318,322,1,0,0,0,319,321,9,0,0,0,320,319,1,0,0,0,321,324,
        1,0,0,0,322,323,1,0,0,0,322,320,1,0,0,0,323,328,1,0,0,0,324,322,
        1,0,0,0,325,326,5,42,0,0,326,329,5,47,0,0,327,329,5,0,0,1,328,325,
        1,0,0,0,328,327,1,0,0,0,329,86,1,0,0,0,330,331,5,47,0,0,331,332,
        5,47,0,0,332,336,1,0,0,0,333,335,8,13,0,0,334,333,1,0,0,0,335,338,
        1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,88,1,0,0,0,338,336,1,
        0,0,0,339,343,7,14,0,0,340,342,7,15,0,0,341,340,1,0,0,0,342,345,
        1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,90,1,0,0,0,345,343,1,
        0,0,0,28,0,96,98,105,107,111,116,198,201,207,211,216,218,221,228,
        231,238,241,248,281,303,307,310,314,322,328,336,343,1,6,0,0
    ]

class SsbScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    STRING_LITERAL = 2
    FOR_TARGET = 3
    CORO = 4
    DEF = 5
    FOR_ACTOR = 6
    FOR_OBJECT = 7
    FOR_PERFORMER = 8
    ALIAS = 9
    PREVIOUS = 10
    POSITION = 11
    IDENTIFIER = 12
    VARIABLE = 13
    MACRO_CALL = 14
    INTEGER = 15
    DECIMAL_INTEGER = 16
    OCT_INTEGER = 17
    HEX_INTEGER = 18
    BIN_INTEGER = 19
    OPEN_PAREN = 20
    CLOSE_PAREN = 21
    COMMA = 22
    COLON = 23
    ASSIGN = 24
    PLUS = 25
    AT = 26
    PARAGRAPH = 27
    OPEN_BRACE = 28
    CLOSE_BRACE = 29
    OPEN_SHARP = 30
    CLOSE_SHARP = 31
    POINT_FIVE = 32
    SKIP_ = 33
    UNKNOWN_CHAR = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'coro'", "'def'", "'for_actor'", "'for_object'", "'for_performer'", 
            "'alias'", "'previous'", "'Position'", "'('", "')'", "','", 
            "':'", "'='", "'+'", "'@'", "'\\u00A7'", "'{'", "'}'", "'<'", 
            "'>'", "'.5'" ]

    symbolicNames = [ "<INVALID>",
            "STRING_LITERAL", "FOR_TARGET", "CORO", "DEF", "FOR_ACTOR", 
            "FOR_OBJECT", "FOR_PERFORMER", "ALIAS", "PREVIOUS", "POSITION", 
            "IDENTIFIER", "VARIABLE", "MACRO_CALL", "INTEGER", "DECIMAL_INTEGER", 
            "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "OPEN_PAREN", "CLOSE_PAREN", 
            "COMMA", "COLON", "ASSIGN", "PLUS", "AT", "PARAGRAPH", "OPEN_BRACE", 
            "CLOSE_BRACE", "OPEN_SHARP", "CLOSE_SHARP", "POINT_FIVE", "SKIP_", 
            "UNKNOWN_CHAR" ]

    ruleNames = [ "T__0", "STRING_LITERAL", "FOR_TARGET", "CORO", "DEF", 
                  "FOR_ACTOR", "FOR_OBJECT", "FOR_PERFORMER", "ALIAS", "PREVIOUS", 
                  "POSITION", "IDENTIFIER", "VARIABLE", "MACRO_CALL", "INTEGER", 
                  "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                  "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", "ASSIGN", 
                  "PLUS", "AT", "PARAGRAPH", "OPEN_BRACE", "CLOSE_BRACE", 
                  "OPEN_SHARP", "CLOSE_SHARP", "POINT_FIVE", "SKIP_", "UNKNOWN_CHAR", 
                  "STRING_ESCAPE_SEQ", "NON_ZERO_DIGIT", "DIGIT", "OCT_DIGIT", 
                  "HEX_DIGIT", "BIN_DIGIT", "SPACES", "LINE_JOINING", "BLOCK_COMMENT", 
                  "LINE_COMMENT", "IDENTIFIER_BASE" ]

    grammarFileName = "SsbScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


