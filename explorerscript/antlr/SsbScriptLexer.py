# Generated from SsbScript.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,434,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,1,1,1,1,1,5,
        1,107,8,1,10,1,12,1,110,9,1,1,1,1,1,1,1,1,1,5,1,116,8,1,10,1,12,
        1,119,9,1,1,1,3,1,122,8,1,1,2,1,2,1,2,1,2,1,2,5,2,129,8,2,10,2,12,
        2,132,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,142,8,2,10,2,12,2,
        145,9,2,1,2,1,2,1,2,3,2,150,8,2,1,3,1,3,1,3,3,3,155,8,3,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,3,12,228,8,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,265,8,19,1,20,3,20,268,8,
        20,1,20,1,20,5,20,272,8,20,10,20,12,20,275,9,20,1,20,3,20,278,8,
        20,1,20,4,20,281,8,20,11,20,12,20,282,3,20,285,8,20,1,21,3,21,288,
        8,21,1,21,1,21,1,21,4,21,293,8,21,11,21,12,21,294,1,22,3,22,298,
        8,22,1,22,1,22,1,22,4,22,303,8,22,11,22,12,22,304,1,23,3,23,308,
        8,23,1,23,1,23,1,23,4,23,313,8,23,11,23,12,23,314,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,3,36,342,8,36,1,36,
        4,36,345,8,36,11,36,12,36,346,1,36,1,36,4,36,351,8,36,11,36,12,36,
        352,1,36,3,36,356,8,36,1,36,1,36,4,36,360,8,36,11,36,12,36,361,3,
        36,364,8,36,1,37,1,37,1,37,1,37,3,37,370,8,37,1,37,1,37,1,38,1,38,
        1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
        1,45,4,45,390,8,45,11,45,12,45,391,1,46,1,46,3,46,396,8,46,1,46,
        3,46,399,8,46,1,46,1,46,3,46,403,8,46,1,47,1,47,1,47,1,47,5,47,409,
        8,47,10,47,12,47,412,9,47,1,47,1,47,1,47,3,47,417,8,47,1,48,1,48,
        1,48,1,48,5,48,423,8,48,10,48,12,48,426,9,48,1,49,1,49,5,49,430,
        8,49,10,49,12,49,433,9,49,3,130,143,410,0,50,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,1,0,16,
        4,0,10,10,12,13,39,39,92,92,4,0,10,10,12,13,34,34,92,92,1,0,36,36,
        1,0,126,126,2,0,79,79,111,111,2,0,88,88,120,120,2,0,66,66,98,98,
        1,0,49,57,1,0,48,57,1,0,48,55,3,0,48,57,65,70,97,102,1,0,48,49,3,
        0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,465,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,1,101,1,0,0,0,3,121,1,0,0,0,5,149,1,0,0,0,7,154,1,0,0,0,
        9,156,1,0,0,0,11,161,1,0,0,0,13,165,1,0,0,0,15,175,1,0,0,0,17,186,
        1,0,0,0,19,200,1,0,0,0,21,206,1,0,0,0,23,215,1,0,0,0,25,227,1,0,
        0,0,27,229,1,0,0,0,29,235,1,0,0,0,31,242,1,0,0,0,33,252,1,0,0,0,
        35,254,1,0,0,0,37,257,1,0,0,0,39,264,1,0,0,0,41,284,1,0,0,0,43,287,
        1,0,0,0,45,297,1,0,0,0,47,307,1,0,0,0,49,316,1,0,0,0,51,318,1,0,
        0,0,53,320,1,0,0,0,55,322,1,0,0,0,57,324,1,0,0,0,59,326,1,0,0,0,
        61,328,1,0,0,0,63,330,1,0,0,0,65,332,1,0,0,0,67,334,1,0,0,0,69,336,
        1,0,0,0,71,338,1,0,0,0,73,363,1,0,0,0,75,369,1,0,0,0,77,373,1,0,
        0,0,79,375,1,0,0,0,81,378,1,0,0,0,83,380,1,0,0,0,85,382,1,0,0,0,
        87,384,1,0,0,0,89,386,1,0,0,0,91,389,1,0,0,0,93,393,1,0,0,0,95,404,
        1,0,0,0,97,418,1,0,0,0,99,427,1,0,0,0,101,102,5,59,0,0,102,2,1,0,
        0,0,103,108,5,39,0,0,104,107,3,79,39,0,105,107,8,0,0,0,106,104,1,
        0,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,
        0,0,0,109,111,1,0,0,0,110,108,1,0,0,0,111,122,5,39,0,0,112,117,5,
        34,0,0,113,116,3,79,39,0,114,116,8,1,0,0,115,113,1,0,0,0,115,114,
        1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,120,
        1,0,0,0,119,117,1,0,0,0,120,122,5,34,0,0,121,103,1,0,0,0,121,112,
        1,0,0,0,122,4,1,0,0,0,123,124,5,39,0,0,124,125,5,39,0,0,125,126,
        5,39,0,0,126,130,1,0,0,0,127,129,9,0,0,0,128,127,1,0,0,0,129,132,
        1,0,0,0,130,131,1,0,0,0,130,128,1,0,0,0,131,133,1,0,0,0,132,130,
        1,0,0,0,133,134,5,39,0,0,134,135,5,39,0,0,135,150,5,39,0,0,136,137,
        5,34,0,0,137,138,5,34,0,0,138,139,5,34,0,0,139,143,1,0,0,0,140,142,
        9,0,0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,144,1,0,0,0,143,141,
        1,0,0,0,144,146,1,0,0,0,145,143,1,0,0,0,146,147,5,34,0,0,147,148,
        5,34,0,0,148,150,5,34,0,0,149,123,1,0,0,0,149,136,1,0,0,0,150,6,
        1,0,0,0,151,155,3,13,6,0,152,155,3,15,7,0,153,155,3,17,8,0,154,151,
        1,0,0,0,154,152,1,0,0,0,154,153,1,0,0,0,155,8,1,0,0,0,156,157,5,
        99,0,0,157,158,5,111,0,0,158,159,5,114,0,0,159,160,5,111,0,0,160,
        10,1,0,0,0,161,162,5,100,0,0,162,163,5,101,0,0,163,164,5,102,0,0,
        164,12,1,0,0,0,165,166,5,102,0,0,166,167,5,111,0,0,167,168,5,114,
        0,0,168,169,5,95,0,0,169,170,5,97,0,0,170,171,5,99,0,0,171,172,5,
        116,0,0,172,173,5,111,0,0,173,174,5,114,0,0,174,14,1,0,0,0,175,176,
        5,102,0,0,176,177,5,111,0,0,177,178,5,114,0,0,178,179,5,95,0,0,179,
        180,5,111,0,0,180,181,5,98,0,0,181,182,5,106,0,0,182,183,5,101,0,
        0,183,184,5,99,0,0,184,185,5,116,0,0,185,16,1,0,0,0,186,187,5,102,
        0,0,187,188,5,111,0,0,188,189,5,114,0,0,189,190,5,95,0,0,190,191,
        5,112,0,0,191,192,5,101,0,0,192,193,5,114,0,0,193,194,5,102,0,0,
        194,195,5,111,0,0,195,196,5,114,0,0,196,197,5,109,0,0,197,198,5,
        101,0,0,198,199,5,114,0,0,199,18,1,0,0,0,200,201,5,97,0,0,201,202,
        5,108,0,0,202,203,5,105,0,0,203,204,5,97,0,0,204,205,5,115,0,0,205,
        20,1,0,0,0,206,207,5,112,0,0,207,208,5,114,0,0,208,209,5,101,0,0,
        209,210,5,118,0,0,210,211,5,105,0,0,211,212,5,111,0,0,212,213,5,
        117,0,0,213,214,5,115,0,0,214,22,1,0,0,0,215,216,5,80,0,0,216,217,
        5,111,0,0,217,218,5,115,0,0,218,219,5,105,0,0,219,220,5,116,0,0,
        220,221,5,105,0,0,221,222,5,111,0,0,222,223,5,110,0,0,223,24,1,0,
        0,0,224,228,3,27,13,0,225,228,3,29,14,0,226,228,3,31,15,0,227,224,
        1,0,0,0,227,225,1,0,0,0,227,226,1,0,0,0,228,26,1,0,0,0,229,230,5,
        97,0,0,230,231,5,99,0,0,231,232,5,116,0,0,232,233,5,111,0,0,233,
        234,5,114,0,0,234,28,1,0,0,0,235,236,5,111,0,0,236,237,5,98,0,0,
        237,238,5,106,0,0,238,239,5,101,0,0,239,240,5,99,0,0,240,241,5,116,
        0,0,241,30,1,0,0,0,242,243,5,112,0,0,243,244,5,101,0,0,244,245,5,
        114,0,0,245,246,5,102,0,0,246,247,5,111,0,0,247,248,5,114,0,0,248,
        249,5,109,0,0,249,250,5,101,0,0,250,251,5,114,0,0,251,32,1,0,0,0,
        252,253,3,99,49,0,253,34,1,0,0,0,254,255,7,2,0,0,255,256,3,99,49,
        0,256,36,1,0,0,0,257,258,7,3,0,0,258,259,3,99,49,0,259,38,1,0,0,
        0,260,265,3,41,20,0,261,265,3,43,21,0,262,265,3,45,22,0,263,265,
        3,47,23,0,264,260,1,0,0,0,264,261,1,0,0,0,264,262,1,0,0,0,264,263,
        1,0,0,0,265,40,1,0,0,0,266,268,5,45,0,0,267,266,1,0,0,0,267,268,
        1,0,0,0,268,269,1,0,0,0,269,273,3,81,40,0,270,272,3,83,41,0,271,
        270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,
        285,1,0,0,0,275,273,1,0,0,0,276,278,5,45,0,0,277,276,1,0,0,0,277,
        278,1,0,0,0,278,280,1,0,0,0,279,281,5,48,0,0,280,279,1,0,0,0,281,
        282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,
        267,1,0,0,0,284,277,1,0,0,0,285,42,1,0,0,0,286,288,5,45,0,0,287,
        286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,290,5,48,0,0,290,
        292,7,4,0,0,291,293,3,85,42,0,292,291,1,0,0,0,293,294,1,0,0,0,294,
        292,1,0,0,0,294,295,1,0,0,0,295,44,1,0,0,0,296,298,5,45,0,0,297,
        296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,5,48,0,0,300,
        302,7,5,0,0,301,303,3,87,43,0,302,301,1,0,0,0,303,304,1,0,0,0,304,
        302,1,0,0,0,304,305,1,0,0,0,305,46,1,0,0,0,306,308,5,45,0,0,307,
        306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,5,48,0,0,310,
        312,7,6,0,0,311,313,3,89,44,0,312,311,1,0,0,0,313,314,1,0,0,0,314,
        312,1,0,0,0,314,315,1,0,0,0,315,48,1,0,0,0,316,317,5,40,0,0,317,
        50,1,0,0,0,318,319,5,41,0,0,319,52,1,0,0,0,320,321,5,44,0,0,321,
        54,1,0,0,0,322,323,5,58,0,0,323,56,1,0,0,0,324,325,5,61,0,0,325,
        58,1,0,0,0,326,327,5,43,0,0,327,60,1,0,0,0,328,329,5,64,0,0,329,
        62,1,0,0,0,330,331,5,167,0,0,331,64,1,0,0,0,332,333,5,123,0,0,333,
        66,1,0,0,0,334,335,5,125,0,0,335,68,1,0,0,0,336,337,5,60,0,0,337,
        70,1,0,0,0,338,339,5,62,0,0,339,72,1,0,0,0,340,342,5,45,0,0,341,
        340,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,345,3,83,41,0,344,
        343,1,0,0,0,345,346,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,
        348,1,0,0,0,348,350,5,46,0,0,349,351,3,83,41,0,350,349,1,0,0,0,351,
        352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,364,1,0,0,0,354,
        356,5,45,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,
        359,5,46,0,0,358,360,3,83,41,0,359,358,1,0,0,0,360,361,1,0,0,0,361,
        359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,341,1,0,0,0,363,
        355,1,0,0,0,364,74,1,0,0,0,365,370,3,97,48,0,366,370,3,95,47,0,367,
        370,3,91,45,0,368,370,3,93,46,0,369,365,1,0,0,0,369,366,1,0,0,0,
        369,367,1,0,0,0,369,368,1,0,0,0,370,371,1,0,0,0,371,372,6,37,0,0,
        372,76,1,0,0,0,373,374,9,0,0,0,374,78,1,0,0,0,375,376,5,92,0,0,376,
        377,9,0,0,0,377,80,1,0,0,0,378,379,7,7,0,0,379,82,1,0,0,0,380,381,
        7,8,0,0,381,84,1,0,0,0,382,383,7,9,0,0,383,86,1,0,0,0,384,385,7,
        10,0,0,385,88,1,0,0,0,386,387,7,11,0,0,387,90,1,0,0,0,388,390,7,
        12,0,0,389,388,1,0,0,0,390,391,1,0,0,0,391,389,1,0,0,0,391,392,1,
        0,0,0,392,92,1,0,0,0,393,395,5,92,0,0,394,396,3,91,45,0,395,394,
        1,0,0,0,395,396,1,0,0,0,396,402,1,0,0,0,397,399,5,13,0,0,398,397,
        1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,403,5,10,0,0,401,403,
        2,12,13,0,402,398,1,0,0,0,402,401,1,0,0,0,403,94,1,0,0,0,404,405,
        5,47,0,0,405,406,5,42,0,0,406,410,1,0,0,0,407,409,9,0,0,0,408,407,
        1,0,0,0,409,412,1,0,0,0,410,411,1,0,0,0,410,408,1,0,0,0,411,416,
        1,0,0,0,412,410,1,0,0,0,413,414,5,42,0,0,414,417,5,47,0,0,415,417,
        5,0,0,1,416,413,1,0,0,0,416,415,1,0,0,0,417,96,1,0,0,0,418,419,5,
        47,0,0,419,420,5,47,0,0,420,424,1,0,0,0,421,423,8,13,0,0,422,421,
        1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,98,1,
        0,0,0,426,424,1,0,0,0,427,431,7,14,0,0,428,430,7,15,0,0,429,428,
        1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,100,
        1,0,0,0,433,431,1,0,0,0,38,0,106,108,115,117,121,130,143,149,154,
        227,264,267,273,277,282,284,287,294,297,304,307,314,341,346,352,
        355,361,363,369,391,395,398,402,410,416,424,431,1,6,0,0
    ]

class SsbScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    STRING_LITERAL = 2
    MULTILINE_STRING_LITERAL = 3
    FOR_TARGET = 4
    CORO = 5
    DEF = 6
    FOR_ACTOR = 7
    FOR_OBJECT = 8
    FOR_PERFORMER = 9
    ALIAS = 10
    PREVIOUS = 11
    POSITION = 12
    CTX_TYPE = 13
    ACTOR = 14
    OBJECT = 15
    PERFORMER = 16
    IDENTIFIER = 17
    VARIABLE = 18
    MACRO_CALL = 19
    INTEGER = 20
    DECIMAL_INTEGER = 21
    OCT_INTEGER = 22
    HEX_INTEGER = 23
    BIN_INTEGER = 24
    OPEN_PAREN = 25
    CLOSE_PAREN = 26
    COMMA = 27
    COLON = 28
    ASSIGN = 29
    PLUS = 30
    AT = 31
    PARAGRAPH = 32
    OPEN_BRACE = 33
    CLOSE_BRACE = 34
    OPEN_SHARP = 35
    CLOSE_SHARP = 36
    DECIMAL = 37
    SKIP_ = 38
    UNKNOWN_CHAR = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'coro'", "'def'", "'for_actor'", "'for_object'", "'for_performer'", 
            "'alias'", "'previous'", "'Position'", "'actor'", "'object'", 
            "'performer'", "'('", "')'", "','", "':'", "'='", "'+'", "'@'", 
            "'\\u00A7'", "'{'", "'}'", "'<'", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "STRING_LITERAL", "MULTILINE_STRING_LITERAL", "FOR_TARGET", 
            "CORO", "DEF", "FOR_ACTOR", "FOR_OBJECT", "FOR_PERFORMER", "ALIAS", 
            "PREVIOUS", "POSITION", "CTX_TYPE", "ACTOR", "OBJECT", "PERFORMER", 
            "IDENTIFIER", "VARIABLE", "MACRO_CALL", "INTEGER", "DECIMAL_INTEGER", 
            "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "OPEN_PAREN", "CLOSE_PAREN", 
            "COMMA", "COLON", "ASSIGN", "PLUS", "AT", "PARAGRAPH", "OPEN_BRACE", 
            "CLOSE_BRACE", "OPEN_SHARP", "CLOSE_SHARP", "DECIMAL", "SKIP_", 
            "UNKNOWN_CHAR" ]

    ruleNames = [ "T__0", "STRING_LITERAL", "MULTILINE_STRING_LITERAL", 
                  "FOR_TARGET", "CORO", "DEF", "FOR_ACTOR", "FOR_OBJECT", 
                  "FOR_PERFORMER", "ALIAS", "PREVIOUS", "POSITION", "CTX_TYPE", 
                  "ACTOR", "OBJECT", "PERFORMER", "IDENTIFIER", "VARIABLE", 
                  "MACRO_CALL", "INTEGER", "DECIMAL_INTEGER", "OCT_INTEGER", 
                  "HEX_INTEGER", "BIN_INTEGER", "OPEN_PAREN", "CLOSE_PAREN", 
                  "COMMA", "COLON", "ASSIGN", "PLUS", "AT", "PARAGRAPH", 
                  "OPEN_BRACE", "CLOSE_BRACE", "OPEN_SHARP", "CLOSE_SHARP", 
                  "DECIMAL", "SKIP_", "UNKNOWN_CHAR", "STRING_ESCAPE_SEQ", 
                  "NON_ZERO_DIGIT", "DIGIT", "OCT_DIGIT", "HEX_DIGIT", "BIN_DIGIT", 
                  "SPACES", "LINE_JOINING", "BLOCK_COMMENT", "LINE_COMMENT", 
                  "IDENTIFIER_BASE" ]

    grammarFileName = "SsbScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


