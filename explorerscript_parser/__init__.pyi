from typing import Any, TypeAlias, overload

Unknown: TypeAlias = Any

class Antlr4ParseTree: ...

class Antlr4Token:
    def __str__(self) -> str: ...
    @property
    def type(self) -> int: ...
    @property
    def line(self) -> int: ...
    @property
    def charPositionInLine(self) -> int: ...
    @property
    def channel(self) -> int: ...
    @property
    def tokenIndex(self) -> int: ...
    @property
    def stopIndex(self) -> int: ...
    @property
    def text(self) -> str: ...

class Antlr4TreeTerminalNode:
    def __str__(self) -> str: ...
    @property
    def symbol(self) -> Antlr4Token: ...

class ExplorerScriptParser:
    class StartContext(Antlr4ParseTree):
        def EOF(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        @overload
        def funcdef(self) -> list[ExplorerScriptParser.FuncdefContext]: ...
        @overload
        def funcdef(self, i: int) -> ExplorerScriptParser.FuncdefContext: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def import_stmt(self) -> list[ExplorerScriptParser.Import_stmtContext]: ...
        @overload
        def import_stmt(self, i: int) -> ExplorerScriptParser.Import_stmtContext: ...
        @overload
        def macrodef(self) -> list[ExplorerScriptParser.MacrodefContext]: ...
        @overload
        def macrodef(self, i: int) -> ExplorerScriptParser.MacrodefContext: ...

    class Import_stmtContext(Antlr4ParseTree):
        def IMPORT(self) -> Antlr4TreeTerminalNode: ...
        def STRING_LITERAL(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class MacrodefContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def COMMA(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def COMMA(self, i: int) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def MACRO(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def VARIABLE(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def VARIABLE(self, i: int) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def func_suite(self) -> ExplorerScriptParser.Func_suiteContext: ...
        def getRuleIndex(self) -> int: ...

    class StmtContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def ctx_block(self) -> ExplorerScriptParser.Ctx_blockContext: ...
        def for_block(self) -> ExplorerScriptParser.For_blockContext: ...
        def forever_block(self) -> ExplorerScriptParser.Forever_blockContext: ...
        def getRuleIndex(self) -> int: ...
        def if_block(self) -> ExplorerScriptParser.If_blockContext: ...
        def macro_call(self) -> ExplorerScriptParser.Macro_callContext: ...
        def message_switch_block(self) -> ExplorerScriptParser.Message_switch_blockContext: ...
        def simple_stmt(self) -> ExplorerScriptParser.Simple_stmtContext: ...
        def switch_block(self) -> ExplorerScriptParser.Switch_blockContext: ...
        def while_block(self) -> ExplorerScriptParser.While_blockContext: ...

    class Simple_stmtContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def assignment(self) -> ExplorerScriptParser.AssignmentContext: ...
        def call(self) -> ExplorerScriptParser.CallContext: ...
        def cntrl_stmt(self) -> ExplorerScriptParser.Cntrl_stmtContext: ...
        def getRuleIndex(self) -> int: ...
        def jump(self) -> ExplorerScriptParser.JumpContext: ...
        def label(self) -> ExplorerScriptParser.LabelContext: ...
        def operation(self) -> ExplorerScriptParser.OperationContext: ...

    class Cntrl_stmtContext(Antlr4ParseTree):
        def BREAK(self) -> Antlr4TreeTerminalNode: ...
        def BREAK_LOOP(self) -> Antlr4TreeTerminalNode: ...
        def CONTINUE(self) -> Antlr4TreeTerminalNode: ...
        def END(self) -> Antlr4TreeTerminalNode: ...
        def HOLD(self) -> Antlr4TreeTerminalNode: ...
        def RETURN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class JumpContext(Antlr4ParseTree):
        def AT(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def JUMP(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class CallContext(Antlr4ParseTree):
        def AT(self) -> Antlr4TreeTerminalNode: ...
        def CALL(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class Macro_callContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def MACRO_CALL(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def arglist(self) -> ExplorerScriptParser.ArglistContext: ...
        def getRuleIndex(self) -> int: ...

    class Ctx_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def WITH(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def ctx_header(self) -> ExplorerScriptParser.Ctx_headerContext: ...
        def getRuleIndex(self) -> int: ...
        def simple_stmt(self) -> ExplorerScriptParser.Simple_stmtContext: ...

    class If_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def IF(self) -> Antlr4TreeTerminalNode: ...
        def NOT(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def OR(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def OR(self, i: int) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def else_block(self) -> ExplorerScriptParser.Else_blockContext: ...
        @overload
        def elseif_block(self) -> list[ExplorerScriptParser.Elseif_blockContext]: ...
        @overload
        def elseif_block(self, i: int) -> ExplorerScriptParser.Elseif_blockContext: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def if_header(self) -> list[ExplorerScriptParser.If_headerContext]: ...
        @overload
        def if_header(self, i: int) -> ExplorerScriptParser.If_headerContext: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...

    class Elseif_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def ELSEIF(self) -> Antlr4TreeTerminalNode: ...
        def NOT(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def OR(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def OR(self, i: int) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def if_header(self) -> list[ExplorerScriptParser.If_headerContext]: ...
        @overload
        def if_header(self, i: int) -> ExplorerScriptParser.If_headerContext: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...

    class Else_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def ELSE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...

    class If_headerContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def if_h_bit(self) -> ExplorerScriptParser.If_h_bitContext: ...
        def if_h_negatable(self) -> ExplorerScriptParser.If_h_negatableContext: ...
        def if_h_op(self) -> ExplorerScriptParser.If_h_opContext: ...
        def if_h_scn(self) -> ExplorerScriptParser.If_h_scnContext: ...
        def operation(self) -> ExplorerScriptParser.OperationContext: ...

    class If_h_negatableContext(Antlr4ParseTree):
        def DEBUG(self) -> Antlr4TreeTerminalNode: ...
        def EDIT(self) -> Antlr4TreeTerminalNode: ...
        def NOT(self) -> Antlr4TreeTerminalNode: ...
        def VARIATION(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class If_h_opContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def conditional_operator(self) -> ExplorerScriptParser.Conditional_operatorContext: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def integer_like(self) -> list[ExplorerScriptParser.Integer_likeContext]: ...
        @overload
        def integer_like(self, i: int) -> ExplorerScriptParser.Integer_likeContext: ...
        def value_of(self) -> ExplorerScriptParser.Value_ofContext: ...

    class If_h_bitContext(Antlr4ParseTree):
        def CLOSE_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def NOT(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class If_h_scnContext(Antlr4ParseTree):
        def CLOSE_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def COMMA(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def INTEGER(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def INTEGER(self, i: int) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def conditional_operator(self) -> ExplorerScriptParser.Conditional_operatorContext: ...
        def getRuleIndex(self) -> int: ...
        def scn_var(self) -> ExplorerScriptParser.Scn_varContext: ...

    class Switch_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def SWITCH(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        @overload
        def default_(self) -> list[ExplorerScriptParser.DefaultContext]: ...
        @overload
        def default_(self, i: int) -> ExplorerScriptParser.DefaultContext: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def single_case_block(self) -> list[ExplorerScriptParser.Single_case_blockContext]: ...
        @overload
        def single_case_block(self, i: int) -> ExplorerScriptParser.Single_case_blockContext: ...
        def switch_header(self) -> ExplorerScriptParser.Switch_headerContext: ...

    class Message_switch_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def MESSAGE_SWITCH_MONOLOGUE(self) -> Antlr4TreeTerminalNode: ...
        def MESSAGE_SWITCH_TALK(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        @overload
        def default_(self) -> list[ExplorerScriptParser.DefaultContext]: ...
        @overload
        def default_(self, i: int) -> ExplorerScriptParser.DefaultContext: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...
        @overload
        def single_case_block(self) -> list[ExplorerScriptParser.Single_case_blockContext]: ...
        @overload
        def single_case_block(self, i: int) -> ExplorerScriptParser.Single_case_blockContext: ...

    class Single_case_blockContext(Antlr4ParseTree):
        def CASE(self) -> Antlr4TreeTerminalNode: ...
        def COLON(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def case_header(self) -> ExplorerScriptParser.Case_headerContext: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...
        def string(self) -> ExplorerScriptParser.StringContext: ...

    class DefaultContext(Antlr4ParseTree):
        def COLON(self) -> Antlr4TreeTerminalNode: ...
        def DEFAULT(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...
        def string(self) -> ExplorerScriptParser.StringContext: ...

    class Switch_headerContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...
        def operation(self) -> ExplorerScriptParser.OperationContext: ...
        def switch_h_dungeon_mode(self) -> ExplorerScriptParser.Switch_h_dungeon_modeContext: ...
        def switch_h_random(self) -> ExplorerScriptParser.Switch_h_randomContext: ...
        def switch_h_scn(self) -> ExplorerScriptParser.Switch_h_scnContext: ...
        def switch_h_sector(self) -> ExplorerScriptParser.Switch_h_sectorContext: ...

    class Switch_h_scnContext(Antlr4ParseTree):
        def CLOSE_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def scn_var(self) -> ExplorerScriptParser.Scn_varContext: ...

    class Switch_h_randomContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def RANDOM(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Switch_h_dungeon_modeContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def DUNGEON_MODE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Switch_h_sectorContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def SECTOR(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class Case_headerContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def case_h_menu(self) -> ExplorerScriptParser.Case_h_menuContext: ...
        def case_h_menu2(self) -> ExplorerScriptParser.Case_h_menu2Context: ...
        def case_h_op(self) -> ExplorerScriptParser.Case_h_opContext: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Case_h_menuContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def MENU(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def string(self) -> ExplorerScriptParser.StringContext: ...

    class Case_h_menu2Context(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def MENU2(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Case_h_opContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def conditional_operator(self) -> ExplorerScriptParser.Conditional_operatorContext: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...
        def value_of(self) -> ExplorerScriptParser.Value_ofContext: ...

    class Forever_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def FOREVER(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...

    class For_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def FOR(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def if_header(self) -> ExplorerScriptParser.If_headerContext: ...
        @overload
        def simple_stmt(self) -> list[ExplorerScriptParser.Simple_stmtContext]: ...
        @overload
        def simple_stmt(self, i: int) -> ExplorerScriptParser.Simple_stmtContext: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...

    class While_blockContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def NOT(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def WHILE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def if_header(self) -> ExplorerScriptParser.If_headerContext: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...

    class AssignmentContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def assignment_adv_log(self) -> ExplorerScriptParser.Assignment_adv_logContext: ...
        def assignment_clear(self) -> ExplorerScriptParser.Assignment_clearContext: ...
        def assignment_dungeon_mode(self) -> ExplorerScriptParser.Assignment_dungeon_modeContext: ...
        def assignment_initial(self) -> ExplorerScriptParser.Assignment_initialContext: ...
        def assignment_regular(self) -> ExplorerScriptParser.Assignment_regularContext: ...
        def assignment_reset(self) -> ExplorerScriptParser.Assignment_resetContext: ...
        def assignment_scn(self) -> ExplorerScriptParser.Assignment_scnContext: ...
        def getRuleIndex(self) -> int: ...

    class Assignment_regularContext(Antlr4ParseTree):
        def CLOSE_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def assign_operator(self) -> ExplorerScriptParser.Assign_operatorContext: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def integer_like(self) -> list[ExplorerScriptParser.Integer_likeContext]: ...
        @overload
        def integer_like(self, i: int) -> ExplorerScriptParser.Integer_likeContext: ...
        def value_of(self) -> ExplorerScriptParser.Value_ofContext: ...

    class Assignment_clearContext(Antlr4ParseTree):
        def CLEAR(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Assignment_initialContext(Antlr4ParseTree):
        def INIT(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Assignment_resetContext(Antlr4ParseTree):
        def DUNGEON_RESULT(self) -> Antlr4TreeTerminalNode: ...
        def RESET(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def scn_var(self) -> ExplorerScriptParser.Scn_varContext: ...

    class Assignment_adv_logContext(Antlr4ParseTree):
        def ADVENTURE_LOG(self) -> Antlr4TreeTerminalNode: ...
        def ASSIGN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Assignment_dungeon_modeContext(Antlr4ParseTree):
        def ASSIGN(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def DUNGEON_MODE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def integer_like(self) -> list[ExplorerScriptParser.Integer_likeContext]: ...
        @overload
        def integer_like(self, i: int) -> ExplorerScriptParser.Integer_likeContext: ...

    class Assignment_scnContext(Antlr4ParseTree):
        def ASSIGN(self) -> Antlr4TreeTerminalNode: ...
        def CLOSE_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def COMMA(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def INTEGER(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def INTEGER(self, i: int) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACKET(self) -> Antlr4TreeTerminalNode: ...
        def SCN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Value_ofContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def VALUE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Scn_varContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def SCN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Conditional_operatorContext(Antlr4ParseTree):
        def CLOSE_SHARP(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_SHARP(self) -> Antlr4TreeTerminalNode: ...
        def OP_AND(self) -> Antlr4TreeTerminalNode: ...
        def OP_BICH(self) -> Antlr4TreeTerminalNode: ...
        def OP_EQ(self) -> Antlr4TreeTerminalNode: ...
        def OP_FALSE(self) -> Antlr4TreeTerminalNode: ...
        def OP_GE(self) -> Antlr4TreeTerminalNode: ...
        def OP_LE(self) -> Antlr4TreeTerminalNode: ...
        def OP_NEQ(self) -> Antlr4TreeTerminalNode: ...
        def OP_TRUE(self) -> Antlr4TreeTerminalNode: ...
        def OP_XOR(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class Assign_operatorContext(Antlr4ParseTree):
        def ASSIGN(self) -> Antlr4TreeTerminalNode: ...
        def OP_DIVIDE(self) -> Antlr4TreeTerminalNode: ...
        def OP_MINUS(self) -> Antlr4TreeTerminalNode: ...
        def OP_MULTIPLY(self) -> Antlr4TreeTerminalNode: ...
        def OP_PLUS(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class FuncdefContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def coro_def(self) -> ExplorerScriptParser.Coro_defContext: ...
        def for_target_def(self) -> ExplorerScriptParser.For_target_defContext: ...
        def getRuleIndex(self) -> int: ...
        def simple_def(self) -> ExplorerScriptParser.Simple_defContext: ...

    class Simple_defContext(Antlr4ParseTree):
        def DEF(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def func_suite(self) -> ExplorerScriptParser.Func_suiteContext: ...
        def getRuleIndex(self) -> int: ...

    class Coro_defContext(Antlr4ParseTree):
        def CORO(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def func_suite(self) -> ExplorerScriptParser.Func_suiteContext: ...
        def getRuleIndex(self) -> int: ...

    class For_target_defContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def DEF(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def for_target_def_target(self) -> ExplorerScriptParser.For_target_def_targetContext: ...
        def func_suite(self) -> ExplorerScriptParser.Func_suiteContext: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class Integer_likeContext(Antlr4ParseTree):
        def DECIMAL(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def VARIABLE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class OperationContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def arglist(self) -> ExplorerScriptParser.ArglistContext: ...
        def getRuleIndex(self) -> int: ...
        def inline_ctx(self) -> ExplorerScriptParser.Inline_ctxContext: ...

    class Inline_ctxContext(Antlr4ParseTree):
        def CLOSE_SHARP(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_SHARP(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def ctx_header(self) -> ExplorerScriptParser.Ctx_headerContext: ...
        def getRuleIndex(self) -> int: ...

    class Func_suiteContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def func_alias(self) -> ExplorerScriptParser.Func_aliasContext: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def stmt(self) -> list[ExplorerScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> ExplorerScriptParser.StmtContext: ...

    class Func_aliasContext(Antlr4ParseTree):
        def ALIAS(self) -> Antlr4TreeTerminalNode: ...
        def PREVIOUS(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class ArglistContext(Antlr4ParseTree):
        @overload
        def COMMA(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def COMMA(self, i: int) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def pos_argument(self) -> list[ExplorerScriptParser.Pos_argumentContext]: ...
        @overload
        def pos_argument(self, i: int) -> ExplorerScriptParser.Pos_argumentContext: ...

    class Pos_argumentContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...
        def position_marker(self) -> ExplorerScriptParser.Position_markerContext: ...
        def string(self) -> ExplorerScriptParser.StringContext: ...

    class Position_markerContext(Antlr4ParseTree):
        def CLOSE_SHARP(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def COMMA(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def COMMA(self, i: int) -> Antlr4TreeTerminalNode: ...
        def OPEN_SHARP(self) -> Antlr4TreeTerminalNode: ...
        def POSITION(self) -> Antlr4TreeTerminalNode: ...
        def STRING_LITERAL(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def position_marker_arg(self) -> list[ExplorerScriptParser.Position_marker_argContext]: ...
        @overload
        def position_marker_arg(self, i: int) -> ExplorerScriptParser.Position_marker_argContext: ...

    class Position_marker_argContext(Antlr4ParseTree):
        def DECIMAL(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class LabelContext(Antlr4ParseTree):
        def AT(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def PARAGRAPH(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class StringContext(Antlr4ParseTree):
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def lang_string(self) -> ExplorerScriptParser.Lang_stringContext: ...
        def string_value(self) -> ExplorerScriptParser.String_valueContext: ...

    class Lang_stringContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def COMMA(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def COMMA(self, i: int) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def lang_string_argument(self) -> list[ExplorerScriptParser.Lang_string_argumentContext]: ...
        @overload
        def lang_string_argument(self, i: int) -> ExplorerScriptParser.Lang_string_argumentContext: ...

    class Lang_string_argumentContext(Antlr4ParseTree):
        def ASSIGN(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def string_value(self) -> ExplorerScriptParser.String_valueContext: ...

    class String_valueContext(Antlr4ParseTree):
        def MULTILINE_STRING_LITERAL(self) -> Antlr4TreeTerminalNode: ...
        def STRING_LITERAL(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class Ctx_headerContext(Antlr4ParseTree):
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> ExplorerScriptParser.Integer_likeContext: ...

    class For_target_def_targetContext(Antlr4ParseTree):
        def FOR(self) -> Antlr4TreeTerminalNode: ...
        def FOR_TARGET(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

class ExplorerScriptBaseVisitor:
    def visitStart(self, context: ExplorerScriptParser.StartContext) -> None: ...
    def visitImport_stmt(self, context: ExplorerScriptParser.Import_stmtContext) -> None: ...
    def visitMacrodef(self, context: ExplorerScriptParser.MacrodefContext) -> None: ...
    def visitStmt(self, context: ExplorerScriptParser.StmtContext) -> None: ...
    def visitSimple_stmt(self, context: ExplorerScriptParser.Simple_stmtContext) -> None: ...
    def visitCntrl_stmt(self, context: ExplorerScriptParser.Cntrl_stmtContext) -> None: ...
    def visitJump(self, context: ExplorerScriptParser.JumpContext) -> None: ...
    def visitCall(self, context: ExplorerScriptParser.CallContext) -> None: ...
    def visitMacro_call(self, context: ExplorerScriptParser.Macro_callContext) -> None: ...
    def visitCtx_block(self, context: ExplorerScriptParser.Ctx_blockContext) -> None: ...
    def visitIf_block(self, context: ExplorerScriptParser.If_blockContext) -> None: ...
    def visitElseif_block(self, context: ExplorerScriptParser.Elseif_blockContext) -> None: ...
    def visitElse_block(self, context: ExplorerScriptParser.Else_blockContext) -> None: ...
    def visitIf_header(self, context: ExplorerScriptParser.If_headerContext) -> None: ...
    def visitIf_h_negatable(self, context: ExplorerScriptParser.If_h_negatableContext) -> None: ...
    def visitIf_h_op(self, context: ExplorerScriptParser.If_h_opContext) -> None: ...
    def visitIf_h_bit(self, context: ExplorerScriptParser.If_h_bitContext) -> None: ...
    def visitIf_h_scn(self, context: ExplorerScriptParser.If_h_scnContext) -> None: ...
    def visitSwitch_block(self, context: ExplorerScriptParser.Switch_blockContext) -> None: ...
    def visitMessage_switch_block(self, context: ExplorerScriptParser.Message_switch_blockContext) -> None: ...
    def visitSingle_case_block(self, context: ExplorerScriptParser.Single_case_blockContext) -> None: ...
    def visitDefault(self, context: ExplorerScriptParser.DefaultContext) -> None: ...
    def visitSwitch_header(self, context: ExplorerScriptParser.Switch_headerContext) -> None: ...
    def visitSwitch_h_scn(self, context: ExplorerScriptParser.Switch_h_scnContext) -> None: ...
    def visitSwitch_h_random(self, context: ExplorerScriptParser.Switch_h_randomContext) -> None: ...
    def visitSwitch_h_dungeon_mode(self, context: ExplorerScriptParser.Switch_h_dungeon_modeContext) -> None: ...
    def visitSwitch_h_sector(self, context: ExplorerScriptParser.Switch_h_sectorContext) -> None: ...
    def visitCase_header(self, context: ExplorerScriptParser.Case_headerContext) -> None: ...
    def visitCase_h_menu(self, context: ExplorerScriptParser.Case_h_menuContext) -> None: ...
    def visitCase_h_menu2(self, context: ExplorerScriptParser.Case_h_menu2Context) -> None: ...
    def visitCase_h_op(self, context: ExplorerScriptParser.Case_h_opContext) -> None: ...
    def visitForever_block(self, context: ExplorerScriptParser.Forever_blockContext) -> None: ...
    def visitFor_block(self, context: ExplorerScriptParser.For_blockContext) -> None: ...
    def visitWhile_block(self, context: ExplorerScriptParser.While_blockContext) -> None: ...
    def visitAssignment(self, context: ExplorerScriptParser.AssignmentContext) -> None: ...
    def visitAssignment_regular(self, context: ExplorerScriptParser.Assignment_regularContext) -> None: ...
    def visitAssignment_clear(self, context: ExplorerScriptParser.Assignment_clearContext) -> None: ...
    def visitAssignment_initial(self, context: ExplorerScriptParser.Assignment_initialContext) -> None: ...
    def visitAssignment_reset(self, context: ExplorerScriptParser.Assignment_resetContext) -> None: ...
    def visitAssignment_adv_log(self, context: ExplorerScriptParser.Assignment_adv_logContext) -> None: ...
    def visitAssignment_dungeon_mode(self, context: ExplorerScriptParser.Assignment_dungeon_modeContext) -> None: ...
    def visitAssignment_scn(self, context: ExplorerScriptParser.Assignment_scnContext) -> None: ...
    def visitValue_of(self, context: ExplorerScriptParser.Value_ofContext) -> None: ...
    def visitScn_var(self, context: ExplorerScriptParser.Scn_varContext) -> None: ...
    def visitConditional_operator(self, context: ExplorerScriptParser.Conditional_operatorContext) -> None: ...
    def visitAssign_operator(self, context: ExplorerScriptParser.Assign_operatorContext) -> None: ...
    def visitFuncdef(self, context: ExplorerScriptParser.FuncdefContext) -> None: ...
    def visitSimple_def(self, context: ExplorerScriptParser.Simple_defContext) -> None: ...
    def visitCoro_def(self, context: ExplorerScriptParser.Coro_defContext) -> None: ...
    def visitFor_target_def(self, context: ExplorerScriptParser.For_target_defContext) -> None: ...
    def visitInteger_like(self, context: ExplorerScriptParser.Integer_likeContext) -> None: ...
    def visitOperation(self, context: ExplorerScriptParser.OperationContext) -> None: ...
    def visitInline_ctx(self, context: ExplorerScriptParser.Inline_ctxContext) -> None: ...
    def visitFunc_suite(self, context: ExplorerScriptParser.Func_suiteContext) -> None: ...
    def visitFunc_alias(self, context: ExplorerScriptParser.Func_aliasContext) -> None: ...
    def visitArglist(self, context: ExplorerScriptParser.ArglistContext) -> None: ...
    def visitPos_argument(self, context: ExplorerScriptParser.Pos_argumentContext) -> None: ...
    def visitPosition_marker(self, context: ExplorerScriptParser.Position_markerContext) -> None: ...
    def visitPosition_marker_arg(self, context: ExplorerScriptParser.Position_marker_argContext) -> None: ...
    def visitLabel(self, context: ExplorerScriptParser.LabelContext) -> None: ...
    def visitString(self, context: ExplorerScriptParser.StringContext) -> None: ...
    def visitLang_string(self, context: ExplorerScriptParser.Lang_stringContext) -> None: ...
    def visitLang_string_argument(self, context: ExplorerScriptParser.Lang_string_argumentContext) -> None: ...
    def visitString_value(self, context: ExplorerScriptParser.String_valueContext) -> None: ...
    def visitCtx_header(self, context: ExplorerScriptParser.Ctx_headerContext) -> None: ...
    def visitFor_target_def_target(self, context: ExplorerScriptParser.For_target_def_targetContext) -> None: ...
    def visitChildren(self, node: Antlr4ParseTree) -> Any: ...
    def defaultResult(self) -> Any: ...

class ExplorerScriptParserWrapper:
    def __init__(self, string: str) -> ExplorerScriptParserWrapper: ...
    def tree(self) -> ExplorerScriptParser.StartContext: ...
    def traverse(self, visitor: ExplorerScriptBaseVisitor) -> Any: ...

class SsbScriptParser:
    class Pos_argumentContext(Antlr4ParseTree):
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> SsbScriptParser.Integer_likeContext: ...
        def jump_marker(self) -> SsbScriptParser.Jump_markerContext: ...
        def position_marker(self) -> SsbScriptParser.Position_markerContext: ...
        def string(self) -> SsbScriptParser.StringContext: ...

    class Jump_markerContext(Antlr4ParseTree):
        def AT(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class StartContext(Antlr4ParseTree):
        def EOF(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        @overload
        def funcdef(self) -> list[SsbScriptParser.FuncdefContext]: ...
        @overload
        def funcdef(self, i: int) -> SsbScriptParser.FuncdefContext: ...
        def getRuleIndex(self) -> int: ...

    class FuncdefContext(Antlr4ParseTree):
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def coro_def(self) -> SsbScriptParser.Coro_defContext: ...
        def for_target_def(self) -> SsbScriptParser.For_target_defContext: ...
        def getRuleIndex(self) -> int: ...
        def simple_def(self) -> SsbScriptParser.Simple_defContext: ...

    class Simple_defContext(Antlr4ParseTree):
        def DEF(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def func_suite(self) -> SsbScriptParser.Func_suiteContext: ...
        def getRuleIndex(self) -> int: ...

    class Coro_defContext(Antlr4ParseTree):
        def CORO(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def func_suite(self) -> SsbScriptParser.Func_suiteContext: ...
        def getRuleIndex(self) -> int: ...

    class For_target_defContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def DEF(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def for_target_def_target(self) -> SsbScriptParser.For_target_def_targetContext: ...
        def func_suite(self) -> SsbScriptParser.Func_suiteContext: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> SsbScriptParser.Integer_likeContext: ...

    class Integer_likeContext(Antlr4ParseTree):
        def DECIMAL(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def VARIABLE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class StmtContext(Antlr4ParseTree):
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def label(self) -> SsbScriptParser.LabelContext: ...
        def operation(self) -> SsbScriptParser.OperationContext: ...

    class OperationContext(Antlr4ParseTree):
        def CLOSE_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_PAREN(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def arglist(self) -> SsbScriptParser.ArglistContext: ...
        def getRuleIndex(self) -> int: ...
        def inline_ctx(self) -> SsbScriptParser.Inline_ctxContext: ...

    class Inline_ctxContext(Antlr4ParseTree):
        def CLOSE_SHARP(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_SHARP(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def ctx_header(self) -> SsbScriptParser.Ctx_headerContext: ...
        def getRuleIndex(self) -> int: ...

    class Func_suiteContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def func_alias(self) -> SsbScriptParser.Func_aliasContext: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def stmt(self) -> list[SsbScriptParser.StmtContext]: ...
        @overload
        def stmt(self, i: int) -> SsbScriptParser.StmtContext: ...

    class Func_aliasContext(Antlr4ParseTree):
        def ALIAS(self) -> Antlr4TreeTerminalNode: ...
        def PREVIOUS(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class ArglistContext(Antlr4ParseTree):
        @overload
        def COMMA(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def COMMA(self, i: int) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def pos_argument(self) -> list[SsbScriptParser.Pos_argumentContext]: ...
        @overload
        def pos_argument(self, i: int) -> SsbScriptParser.Pos_argumentContext: ...

    class Position_markerContext(Antlr4ParseTree):
        def CLOSE_SHARP(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def COMMA(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def COMMA(self, i: int) -> Antlr4TreeTerminalNode: ...
        def OPEN_SHARP(self) -> Antlr4TreeTerminalNode: ...
        def POSITION(self) -> Antlr4TreeTerminalNode: ...
        def STRING_LITERAL(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def position_marker_arg(self) -> list[SsbScriptParser.Position_marker_argContext]: ...
        @overload
        def position_marker_arg(self, i: int) -> SsbScriptParser.Position_marker_argContext: ...

    class Position_marker_argContext(Antlr4ParseTree):
        def DECIMAL(self) -> Antlr4TreeTerminalNode: ...
        def INTEGER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class LabelContext(Antlr4ParseTree):
        def AT(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def PARAGRAPH(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class StringContext(Antlr4ParseTree):
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def lang_string(self) -> SsbScriptParser.Lang_stringContext: ...
        def string_value(self) -> SsbScriptParser.String_valueContext: ...

    class Lang_stringContext(Antlr4ParseTree):
        def CLOSE_BRACE(self) -> Antlr4TreeTerminalNode: ...
        @overload
        def COMMA(self) -> list[Antlr4TreeTerminalNode]: ...
        @overload
        def COMMA(self, i: int) -> Antlr4TreeTerminalNode: ...
        def OPEN_BRACE(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        @overload
        def lang_string_argument(self) -> list[SsbScriptParser.Lang_string_argumentContext]: ...
        @overload
        def lang_string_argument(self, i: int) -> SsbScriptParser.Lang_string_argumentContext: ...

    class Lang_string_argumentContext(Antlr4ParseTree):
        def ASSIGN(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def string_value(self) -> SsbScriptParser.String_valueContext: ...

    class String_valueContext(Antlr4ParseTree):
        def MULTILINE_STRING_LITERAL(self) -> Antlr4TreeTerminalNode: ...
        def STRING_LITERAL(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

    class Ctx_headerContext(Antlr4ParseTree):
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...
        def integer_like(self) -> SsbScriptParser.Integer_likeContext: ...

    class For_target_def_targetContext(Antlr4ParseTree):
        def FOR(self) -> Antlr4TreeTerminalNode: ...
        def FOR_TARGET(self) -> Antlr4TreeTerminalNode: ...
        def IDENTIFIER(self) -> Antlr4TreeTerminalNode: ...
        def accept(self, visitor: SsbScriptBaseVisitor) -> Any: ...
        def getRuleIndex(self) -> int: ...

class SsbScriptBaseVisitor:
    def visitPos_argument(self, context: SsbScriptParser.Pos_argumentContext) -> None: ...
    def visitJump_marker(self, context: SsbScriptParser.Jump_markerContext) -> None: ...
    def visitStart(self, context: SsbScriptParser.StartContext) -> None: ...
    def visitFuncdef(self, context: SsbScriptParser.FuncdefContext) -> None: ...
    def visitSimple_def(self, context: SsbScriptParser.Simple_defContext) -> None: ...
    def visitCoro_def(self, context: SsbScriptParser.Coro_defContext) -> None: ...
    def visitFor_target_def(self, context: SsbScriptParser.For_target_defContext) -> None: ...
    def visitInteger_like(self, context: SsbScriptParser.Integer_likeContext) -> None: ...
    def visitStmt(self, context: SsbScriptParser.StmtContext) -> None: ...
    def visitOperation(self, context: SsbScriptParser.OperationContext) -> None: ...
    def visitInline_ctx(self, context: SsbScriptParser.Inline_ctxContext) -> None: ...
    def visitFunc_suite(self, context: SsbScriptParser.Func_suiteContext) -> None: ...
    def visitFunc_alias(self, context: SsbScriptParser.Func_aliasContext) -> None: ...
    def visitArglist(self, context: SsbScriptParser.ArglistContext) -> None: ...
    def visitPosition_marker(self, context: SsbScriptParser.Position_markerContext) -> None: ...
    def visitPosition_marker_arg(self, context: SsbScriptParser.Position_marker_argContext) -> None: ...
    def visitLabel(self, context: SsbScriptParser.LabelContext) -> None: ...
    def visitString(self, context: SsbScriptParser.StringContext) -> None: ...
    def visitLang_string(self, context: SsbScriptParser.Lang_stringContext) -> None: ...
    def visitLang_string_argument(self, context: SsbScriptParser.Lang_string_argumentContext) -> None: ...
    def visitString_value(self, context: SsbScriptParser.String_valueContext) -> None: ...
    def visitCtx_header(self, context: SsbScriptParser.Ctx_headerContext) -> None: ...
    def visitFor_target_def_target(self, context: SsbScriptParser.For_target_def_targetContext) -> None: ...
    def visitChildren(self, node: Antlr4ParseTree) -> Any: ...
    def defaultResult(self) -> Any: ...

class SsbScriptParserWrapper:
    def __init__(self, string: str) -> SsbScriptParserWrapper: ...
    def tree(self) -> SsbScriptParser.StartContext: ...
    def traverse(self, visitor: SsbScriptBaseVisitor) -> Any: ...
