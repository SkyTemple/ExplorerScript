from __future__ import annotations
import typing
__all__ = ['Antlr4ParseTree', 'Antlr4ParserRuleContext', 'Antlr4RuleContext', 'Antlr4Token', 'Antlr4TreeTerminalNode', 'ExplorerScriptVisitor', 'ParserWrapper']
class Antlr4ParseTree:
    pass
class Antlr4ParserRuleContext(Antlr4RuleContext):
    pass
class Antlr4RuleContext(Antlr4ParseTree):
    pass
class Antlr4Token:
    def __str__(self) -> str:
        ...
    @property
    def channel(self) -> int:
        ...
    @property
    def charPositionInLine(self) -> int:
        ...
    @property
    def line(self) -> int:
        ...
    @property
    def stopIndex(self) -> int:
        ...
    @property
    def text(self) -> str:
        ...
    @property
    def tokenIndex(self) -> int:
        ...
    @property
    def type(self) -> int:
        ...
class Antlr4TreeTerminalNode:
    def __str__(self) -> str:
        ...
    @property
    def symbol(self) -> ...:
        ...
class ExplorerScriptVisitor:
    def __init__(self) -> None:
        ...
    def defaultResult(self) -> typing.Any:
        ...
    def visitArglist(self, arg0: ...) -> ...:
        ...
    def visitAssign_operator(self, arg0: ...) -> ...:
        ...
    def visitAssignment(self, arg0: ...) -> ...:
        ...
    def visitAssignment_adv_log(self, arg0: ...) -> ...:
        ...
    def visitAssignment_clear(self, arg0: ...) -> ...:
        ...
    def visitAssignment_dungeon_mode(self, arg0: ...) -> ...:
        ...
    def visitAssignment_initial(self, arg0: ...) -> ...:
        ...
    def visitAssignment_regular(self, arg0: ...) -> ...:
        ...
    def visitAssignment_reset(self, arg0: ...) -> ...:
        ...
    def visitAssignment_scn(self, arg0: ...) -> ...:
        ...
    def visitCall(self, arg0: ...) -> ...:
        ...
    def visitCase_h_menu(self, arg0: ...) -> ...:
        ...
    def visitCase_h_menu2(self, arg0: ...) -> ...:
        ...
    def visitCase_h_op(self, arg0: ...) -> ...:
        ...
    def visitCase_header(self, arg0: ...) -> ...:
        ...
    def visitChildren(self, arg0: Antlr4ParseTree) -> typing.Any:
        ...
    def visitCntrl_stmt(self, arg0: ...) -> ...:
        ...
    def visitConditional_operator(self, arg0: ...) -> ...:
        ...
    def visitCoro_def(self, arg0: ...) -> ...:
        ...
    def visitCtx_block(self, arg0: ...) -> ...:
        ...
    def visitCtx_header(self, arg0: ...) -> ...:
        ...
    def visitDefault(self, arg0: ...) -> ...:
        ...
    def visitElse_block(self, arg0: ...) -> ...:
        ...
    def visitElseif_block(self, arg0: ...) -> ...:
        ...
    def visitFor_block(self, arg0: ...) -> ...:
        ...
    def visitFor_target_def(self, arg0: ...) -> ...:
        ...
    def visitFor_target_def_target(self, arg0: ...) -> ...:
        ...
    def visitForever_block(self, arg0: ...) -> ...:
        ...
    def visitFunc_alias(self, arg0: ...) -> ...:
        ...
    def visitFunc_suite(self, arg0: ...) -> ...:
        ...
    def visitFuncdef(self, arg0: ...) -> ...:
        ...
    def visitIf_block(self, arg0: ...) -> ...:
        ...
    def visitIf_h_bit(self, arg0: ...) -> ...:
        ...
    def visitIf_h_negatable(self, arg0: ...) -> ...:
        ...
    def visitIf_h_op(self, arg0: ...) -> ...:
        ...
    def visitIf_h_scn(self, arg0: ...) -> ...:
        ...
    def visitIf_header(self, arg0: ...) -> ...:
        ...
    def visitImport_stmt(self, arg0: ...) -> ...:
        ...
    def visitInline_ctx(self, arg0: ...) -> ...:
        ...
    def visitInteger_like(self, arg0: ...) -> ...:
        ...
    def visitJump(self, arg0: ...) -> ...:
        ...
    def visitLabel(self, arg0: ...) -> ...:
        ...
    def visitLang_string(self, arg0: ...) -> ...:
        ...
    def visitLang_string_argument(self, arg0: ...) -> ...:
        ...
    def visitMacro_call(self, arg0: ...) -> ...:
        ...
    def visitMacrodef(self, arg0: ...) -> ...:
        ...
    def visitMessage_switch_block(self, arg0: ...) -> ...:
        ...
    def visitOperation(self, arg0: ...) -> ...:
        ...
    def visitPos_argument(self, arg0: ...) -> ...:
        ...
    def visitPosition_marker(self, arg0: ...) -> ...:
        ...
    def visitPosition_marker_arg(self, arg0: ...) -> ...:
        ...
    def visitScn_var(self, arg0: ...) -> ...:
        ...
    def visitSimple_def(self, arg0: ...) -> ...:
        ...
    def visitSimple_stmt(self, arg0: ...) -> ...:
        ...
    def visitSingle_case_block(self, arg0: ...) -> ...:
        ...
    def visitStart(self, arg0: ...) -> ...:
        ...
    def visitStmt(self, arg0: ...) -> ...:
        ...
    def visitString(self, arg0: ...) -> ...:
        ...
    def visitString_value(self, arg0: ...) -> ...:
        ...
    def visitSwitch_block(self, arg0: ...) -> ...:
        ...
    def visitSwitch_h_dungeon_mode(self, arg0: ...) -> ...:
        ...
    def visitSwitch_h_random(self, arg0: ...) -> ...:
        ...
    def visitSwitch_h_scn(self, arg0: ...) -> ...:
        ...
    def visitSwitch_h_sector(self, arg0: ...) -> ...:
        ...
    def visitSwitch_header(self, arg0: ...) -> ...:
        ...
    def visitValue_of(self, arg0: ...) -> ...:
        ...
    def visitWhile_block(self, arg0: ...) -> ...:
        ...
class ParserWrapper:
    def __init__(self, arg0: str) -> None:
        ...
    def traverse(self, arg0: ExplorerScriptVisitor) -> None:
        ...
    def tree(self) -> ...:
        ...
